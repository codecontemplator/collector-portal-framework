{"version":3,"file":"static/preview.f3c58550b007ace16045.bundle.js","sources":["webpack:///./src/common/components/Input/index.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport Collapse from 'react-css-collapse';\r\nimport glamorous, { CSSProperties, GlamorousComponent } from 'glamorous';\r\nimport * as uniqid from 'uniqid';\r\nimport { borderRadius, colors } from '../../../theme';\r\nimport { Label } from '../Label';\r\nimport { css } from 'glamor';\r\n\r\nexport const InputContainer: GlamorousComponent<React.HTMLProps<HTMLDivElement>, {}> = glamorous.div({\r\n    maxWidth: 500,\r\n    marginBottom: '1.25em',\r\n});\r\n\r\nconst inputStyles: CSSProperties = {\r\n    font: 'inherit',\r\n    color: 'inherit',\r\n    width: '100%',\r\n    borderRadius: borderRadius.small,\r\n    border: '1px solid',\r\n    borderColor: colors.mediumGray,\r\n    padding: 11, // To make it 12 pixels when accounting for the 1px border above\r\n    boxSizing: 'border-box',\r\n    appearance: 'none',\r\n    transition: 'border-bottom-left-radius 150ms, border-bottom-right-radius 150ms',\r\n\r\n    '&:disabled': {\r\n        background: colors.offWhite,\r\n        borderColor: colors.lightGray,\r\n        opacity: 1,\r\n    },\r\n};\r\n\r\nconst inputErrorTransition = css({\r\n    transition: 'height 150ms',\r\n});\r\n\r\nexport const InputField = glamorous.input<{ hasError?: boolean }>(inputStyles, ({ hasError }) => ({\r\n    borderBottomLeftRadius: hasError ? 0 : borderRadius.small,\r\n    borderBottomRightRadius: hasError ? 0 : borderRadius.small,\r\n    borderBottomColor: hasError ? colors.red : colors.mediumGray,\r\n}));\r\n\r\nexport const InputError = glamorous.div({\r\n    background: colors.red,\r\n    fontWeight: 500,\r\n    borderBottomLeftRadius: borderRadius.small,\r\n    borderBottomRightRadius: borderRadius.small,\r\n    color: colors.white,\r\n    padding: 8,\r\n    paddingLeft: 12,\r\n    minHeight: 40,\r\n    boxSizing: 'border-box',\r\n});\r\n\r\nconst Textarea = glamorous.textarea<{ hasError?: boolean }>(\r\n    {\r\n        ...inputStyles,\r\n        resize: 'vertical',\r\n        minHeight: 80,\r\n    },\r\n    ({ hasError }) => ({\r\n        borderColor: hasError ? colors.red : colors.mediumGray,\r\n        backgroundColor: hasError ? '#FFFCFC' : colors.white,\r\n    })\r\n);\r\n\r\nexport interface InputProps {\r\n    label?: string | React.ReactNode;\r\n    value?: string;\r\n    placeholder?: string;\r\n    multiline?: boolean;\r\n    disabled?: boolean;\r\n    error?: string | boolean;\r\n    maxLength?: number;\r\n    pattern?: string;\r\n    name?: string;\r\n    onChange?: (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void;\r\n    innerRef?: (inputElement: HTMLInputElement) => void;\r\n    type?: string;\r\n}\r\n\r\nexport interface InputState {\r\n    id: string;\r\n    isDirty: boolean;\r\n}\r\n\r\nexport class Input extends React.Component<InputProps, InputState> {\r\n    static displayName = 'Collector.Input';\r\n\r\n    state: InputState = {\r\n        id: uniqid(),\r\n        isDirty: false,\r\n    };\r\n\r\n    makeDirty = () => {\r\n        this.setState({ isDirty: true });\r\n    };\r\n\r\n    render() {\r\n        const { label, error, multiline, ...rest } = this.props;\r\n        const InputElement = multiline ? Textarea : InputField;\r\n        const showError = Boolean(this.state.isDirty && error);\r\n\r\n        return (\r\n            <InputContainer>\r\n                {label && (\r\n                    <Label htmlFor={this.state.id} error={showError}>\r\n                        {label}\r\n                    </Label>\r\n                )}\r\n                <InputElement id={this.state.id} onBlur={this.makeDirty} hasError={showError} aria-invalid={showError} {...rest} />\r\n\r\n                <Collapse isOpen={showError && typeof error === 'string'} className={`${inputErrorTransition}`}>\r\n                    <InputError>{error}</InputError>\r\n                </Collapse>\r\n            </InputContainer>\r\n        );\r\n    }\r\n}\r\n"],"mappings":"AAQA","sourceRoot":""}